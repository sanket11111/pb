# app: poker-school
# service: ${self:app}
# # Custom variable declaration.
# custom:
#   ProjectPrefix: pbschool
#   SECRETS: ${file(./utils/secret-manager.js):${opt:stage, 'dev'}}
#   RESOURCE_PREFIX: ${opt:projectPrefix, self:custom.ProjectPrefix}
#   envAbbreviations:
#     dev: -dev
#     staging: -staging
#     prod: -prod
#     qa: -qa

# provider:
#   name: aws
#   stage: ${opt:stage, 'dev'}
#   runtime: nodejs14.x
#   role: CustomLambdaRole
#   #fallback strategy
#   region: ${opt:region, 'ap-south-1'}
#   stackName: ${self:custom.RESOURCE_PREFIX}${self:custom.envAbbreviations.${self:provider.stage}} # pbschool-dev, pbschool-qa, pbschool
#   apiName: ${self:custom.RESOURCE_PREFIX}${self:custom.envAbbreviations.${self:provider.stage}}
#   deploymentBucket:
#     name: ${self:custom.SECRETS.DeploymentBucket} # ? deployment bucket, pre created
#   deploymentPrefix: ${self:custom.RESOURCE_PREFIX}
#   memorySize: 256
#   timeout: 30
#   environment:
#     ENV_NAME: ${self:provider.stage}
#     API_GATEWAY_ARN: { "Fn::Join" : ["", [ "arn:aws:apigateway:", { "Ref" : "AWS::Region" }, "::/restapis/", { "Ref" : "ApiGatewayRestApi" } ] ] }

#     # environment: ${self:provider.stage}
#     # cost_center: 'billing'
# #     project: 'pb-school'
#   # Here we can set the environment variables which will be assign to all lambdas.
#   # environment:
#   # key: value
#   # ${opt:stage, self:provider.stage} - opt:stage means it tells to serverless to use --stage flag value for the stage variable from CLI if exists.
#   # self:provider.stage tells serverless to use the default stage value from provider
# plugins:
#   # This plugin enables use of AWS aliases on Lambda functions
#   - serverless-aws-alias
#   - serverless-offline
#   - serverless-prune-plugin
# resources:
#   Resources:
#     CustomLambdaRole:
#       Type: AWS::IAM::Role
#       Properties:
#         Path: /
#         RoleName: ${self:custom.RESOURCE_PREFIX}-CustomLambdaRole${self:custom.envAbbreviations.${self:provider.stage}} # required if you want to use 'serverless deploy --function' later on
#         AssumeRolePolicyDocument:
#           Version: '2012-10-17'
#           Statement:
#             - Effect: Allow
#               Principal:
#                 Service:
#                   - lambda.amazonaws.com
#                   - edgelambda.amazonaws.com
#               Action: sts:AssumeRole
#         # note that these rights are needed if you want your function to be able to communicate with resources within your vpc
#         ManagedPolicyArns:
#           - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
#         Policies:
#           - PolicyName: ${self:custom.RESOURCE_PREFIX}-CustomLambdaPolicy${self:custom.envAbbreviations.${self:provider.stage}}
#             PolicyDocument:
#               Version: '2012-10-17'
#               Statement:
#                 - Effect: Allow
#                   Action:
#                     - logs:CreateLogStream
#                     - logs:CreateLogGroup
#                     - logs:PutLogEvents
#                     - secretsmanager:GetSecretValue
#                     - secretsmanager:DescribeSecret
#                     - secretsmanager:PutSecretValue
#                     - secretsmanager:UpdateSecret
#                     - secretsmanager:CreateSecret
#                     - secretsmanager:ListSecrets
#                     - s3:GetBucketLocation
#                     - s3:ListBucket
#                     - s3:GetObject
#                     - lambda:InvokeFunction
#                   Resource: '*'
#         Tags:
#           - Key: environment
#             Value: ${self:provider.stage}
#           - Key: cost_center
#             Value: 'billing'
#           - Key: project
#             Value: 'pb-school'
                  
#     CustomBeanstalkInstanceRole:
#       Type: AWS::IAM::Role
#       Properties:
#         Path: /
#         RoleName: ${self:custom.RESOURCE_PREFIX}-CustomBeanstalkInstanceRole${self:custom.envAbbreviations.${self:provider.stage}}
#         AssumeRolePolicyDocument:
#           Version: '2012-10-17'
#           Statement:
#             -
#               Effect: Allow
#               Principal:
#                 Service:
#                   - ec2.amazonaws.com
#               Action:
#                 - sts:AssumeRole
#         ManagedPolicyArns:
#           - arn:aws:iam::aws:policy/AWSElasticBeanstalkWebTier
#           - arn:aws:iam::aws:policy/AWSElasticBeanstalkMulticontainerDocker
#           - arn:aws:iam::aws:policy/AWSElasticBeanstalkWorkerTier
#         Policies:
#           - PolicyName: ${self:custom.RESOURCE_PREFIX}-CustomBeanstalkInstancePolicy${self:custom.envAbbreviations.${self:provider.stage}}
#             PolicyDocument:
#               Version: '2012-10-17'
#               Statement:
#                 - Effect: Allow
#                   Action:
#                     - s3:*
#                   Resource: '*'
#         Tags:
#           - Key: environment
#             Value: ${self:provider.stage}
#           - Key: cost_center
#             Value: 'billing'
#           - Key: project
#             Value: 'pb-school'
#     BeanstalkInstanceProfile:
#       Type: AWS::IAM::InstanceProfile
#       Properties:
#         Path: /
#         Roles:
#         - !Ref CustomBeanstalkInstanceRole
#     RedisCacheSG:
#       Type: AWS::EC2::SecurityGroup
#       Properties:
#         GroupDescription: Security group for redis cache
#         VpcId: ${self:custom.config.VPC_ID, '${self:custom.SECRETS.VpcID}'} 
#         Tags:
#           - Key: environment
#             Value: ${self:provider.stage}
#           - Key: cost_center
#             Value: 'billing'
#           - Key: project
#             Value: 'pb-school'
#     ElastiCacheSubnetGroup:
#       Type: AWS::ElastiCache::SubnetGroup
#       Properties:
#         CacheSubnetGroupName: ${self:custom.RESOURCE_PREFIX}-subnetGroup${self:custom.envAbbreviations.${self:provider.stage}}
#         Description: Cache Subnet Group
#         SubnetIds:
#           - ${self:custom.SECRETS.PrivateSubnetID1}
#           - ${self:custom.SECRETS.PrivateSubnetID2}
#         Tags:
#           - Key: environment
#             Value: ${self:provider.stage}
#           - Key: cost_center
#             Value: 'billing'
#           - Key: project
#             Value: 'pb-school'
#     RedisCluster:
#       Type: AWS::ElastiCache::CacheCluster
#       Properties:
#         ClusterName: ${self:custom.RESOURCE_PREFIX}-cluster${self:custom.envAbbreviations.${self:provider.stage}}
#         VpcSecurityGroupIds:
#           - !GetAtt
#             - RedisCacheSG
#             - GroupId
#         CacheSubnetGroupName: ${self:custom.RESOURCE_PREFIX}-subnetGroup${self:custom.envAbbreviations.${self:provider.stage}}
#         AutoMinorVersionUpgrade: true
#         Engine: redis
#         CacheNodeType: cache.t2.micro
#         NumCacheNodes: 1
#         Tags:
#           - Key: environment
#             Value: ${self:provider.stage}
#           - Key: cost_center
#             Value: 'billing'
#           - Key: project
#             Value: 'pb-school'
#     ## Create beanstalk app and it's environment.
#     PbSchoolApp:
#       Type: AWS::ElasticBeanstalk::Application
#       Properties:
#         ApplicationName: ${self:custom.RESOURCE_PREFIX}-app${self:custom.envAbbreviations.${self:provider.stage}}
#         Description: PbSchool application
#     PbSchoolEnv:
#       Type: AWS::ElasticBeanstalk::Environment
#       Properties:
#         ApplicationName:
#           Ref: PbSchoolApp
#         EnvironmentName: ${self:custom.RESOURCE_PREFIX}-env${self:custom.envAbbreviations.${self:provider.stage}}
#         Description: PbSchool application ${self:custom.envAbbreviations.${self:provider.stage}} environment
#         SolutionStackName: '64bit Amazon Linux 2 v5.4.4 running Node.js 14'
#         Tier:
#           Name: WebServer
#           Type: Standard
#           Version: ' '
#         OptionSettings:
#           # - Namespace: aws:elasticbeanstalk:container:nodejs
#           #   OptionName: NodeVersion
#           #   Value: '13.8.0'
#           - Namespace: aws:elasticbeanstalk:environment
#             OptionName: EnvironmentType
#             Value: SingleInstance
#           - Namespace: aws:autoscaling:launchconfiguration
#             OptionName: InstanceType
#             Value: ${self:custom.SECRETS.EBInstanceCapacity}
#           - Namespace: aws:ec2:vpc
#             OptionName: Subnets
#             Value: !Join
#               - ','
#               - - ${self:custom.SECRETS.PublicSubnetID1}
#                 - ${self:custom.SECRETS.PublicSubnetID2}
#         #   - Namespace: aws:autoscaling:launchconfiguration
#         #     OptionName: IamInstanceProfile
#         #     Value: aws-elasticbeanstalk-ec2-role
#           - Namespace: aws:elasticbeanstalk:environment
#             OptionName: ServiceRole
#             Value: aws-elasticbeanstalk-service-role
#           - Namespace: aws:ec2:vpc
#             OptionName: VPCId
#             Value: ${self:custom.SECRETS.VpcID}
#           - Namespace: aws:elasticbeanstalk:application:environment
#             OptionName: DATABASE_PASSWORD
#             Value: ${self:custom.SECRETS.DatabasePassword}
#           - Namespace: aws:elasticbeanstalk:application:environment
#             OptionName: DATABASE_SSL
#             Value: ${self:custom.SECRETS.DatabaseSSL}
#           - Namespace: aws:elasticbeanstalk:application:environment
#             OptionName: HOST
#             Value: ${self:custom.SECRETS.Host}
#           - Namespace: aws:elasticbeanstalk:application:environment
#             OptionName: PORT
#             Value: ${self:custom.SECRETS.Port}
#           - Namespace: aws:elasticbeanstalk:application:environment
#             OptionName: DATABASE_HOST
#             Value: ${self:custom.SECRETS.DatabaseHost}
#           - Namespace: aws:elasticbeanstalk:application:environment
#             OptionName: DATABASE_NAME
#             Value: ${self:custom.SECRETS.DatabaseName}
#           - Namespace: aws:elasticbeanstalk:application:environment
#             OptionName: DATABASE_USERNAME
#             Value: ${self:custom.SECRETS.DatabaseUserName}
#           - Namespace: aws:elasticbeanstalk:application:environment
#             OptionName: AUTHENTICATION_DATABASE
#             Value: ${self:custom.SECRETS.AuthenticationDatabase}
#           - Namespace: aws:elasticbeanstalk:application:environment
#             OptionName: DATABASE_SRV
#             Value: ${self:custom.SECRETS.DatabaseSRV}
#           - Namespace: aws:elasticbeanstalk:application:environment
#             OptionName: DATABASE_SSL
#             Value: ${self:custom.SECRETS.DatabaseSSL}
#           - Namespace: aws:elasticbeanstalk:application:environment
#             OptionName: DATABASE_PORT
#             Value: ${self:custom.SECRETS.DatabasePort}
#           - Namespace: aws:elasticbeanstalk:application:environment
#             OptionName: AWS_ASSETS_BUCKET
#             Value: ${self:custom.SECRETS.AWSAssetsBucket}
#           - Namespace: aws:elasticbeanstalk:application:environment
#             OptionName: AWS_REGION
#             Value: ${self:custom.SECRETS.AWSRegion}
#           - Namespace: aws:autoscaling:launchconfiguration
#             OptionName: IamInstanceProfile
#             Value: !Ref BeanstalkInstanceProfile
#         Tags:
#           - Key: environment
#             Value: ${self:provider.stage}
#           - Key: cost_center
#             Value: 'billing'
#           - Key: project
#             Value: 'pb-school'

# functions:
#   mainServer:
#     name: ${self:custom.RESOURCE_PREFIX}-mainServer${self:custom.envAbbreviations.${self:provider.stage}}
#     tags:
#       environment: ${self:provider.stage}
#       cost_center: 'billing'
#       project: 'pb-school'
#     handler: handler/apihandler.main
#     events:
#       - http:
#           path: /v1/chapters
#           method: get
#           cors: true
#       - http:
#           path: /v1/courses/chapters
#           method: get
#           cors: true
#       - http:
#           path: /v1/chapters/quizzes
#           method: get
#           cors: true
#       - http:
#           path: /v1/courses
#           method: get
#           cors: true
#       - http:
#           path: /v1/coursedetails
#           method: get
#           cors: true
#       - http:
#           path: /v1/feeds
#           method: get
#           cors: true
#       - http:
#           path: /v1/freevideos
#           method: get
#           cors: true
#       - http:
#           path: /v1/freequizzes
#           method: get
#           cors: true
#       - http:
#           path: /v1/freequiz
#           method: get
#           cors: true
#       - http:
#           path: /v1/homepage
#           method: get
#           cors: true
#       - http:
#           path: /v1/livestreams
#           method: get
#           cors: true
#       - http:
#           path: /v1/banners
#           method: get
#           cors: true
#       - http:
#           path: /v1/userprogress
#           method: get
#           cors: true
#       - http:
#           path: /v1/postuserprogress
#           method: post
#           cors: true
#       - http:
#           path: /v1/quizprogress
#           method: get
#           cors: true
#       - http:
#           path: /v1/videoprogress
#           method: get
#           cors: true
#       - http:
#           path: /v1/chapterprogress
#           method: get
#           cors: true
#       - http:
#           path: /v1/courseprogress
#           method: get
#           cors: true
#       - http:
#           path: /v1/postuserfeedback
#           method: post
#           cors: true
#       - http:
#           path: /v1/getuserfeedback
#           method: get
#           cors: true
#       - http:
#           path: /v1/getmylearning
#           method: get
#           cors: true
#       - http:
#           path: /v1/postlastseen
#           method: post
#           cors: true
#       - http:
#           path: /v1/getlastseen
#           method: get
#           cors: true
#       - http:
#           path: /v1/badgeheader
#           method: get
#           cors: true
#       - http:
#           path: /v1/welcomebadge
#           method: get
#           cors: true
#       - http:
#           path: /v1/badgedetail
#           method: get
#           cors: true
#       - http:
#           path: /v1/bookmark
#           method: post
#           cors: true
#       - http:
#           path: /v1/videos-bookmark
#           method: get
#           cors: true
#       - http:
#           path: /v1/chapters-bookmark
#           method: get
#           cors: true
#       - http:
#           path: /v1/quiz-bookmark
#           method: get
#           cors: true
#       - http:
#           path: /v1/videos
#           method: get
#           cors: true
#       - http:
#           path: /v1/popup
#           method: get
#           cors: true
#       - http:
#           path: /v1/streak-detail
#           method: get
#           core: true
#       - http:
#           path: /v1/courses-left
#           method: get
#           cors: true
#       - http:
#           path: /v1/recommendations
#           method: get
#           core: true
#     package:
#       artifact: ./dist/apihandler.zip
#       individually: true
#     vpc:
#      securityGroupIds:
#        - ${self:custom.SECRETS.SecurityGroupID}
#      subnetIds:
#        - ${self:custom.SECRETS.PrivateSubnetID1}
#        - ${self:custom.SECRETS.PrivateSubnetID2}
#   userProgressUpdate:
#     name: ${self:custom.RESOURCE_PREFIX}-updateQuiz${self:custom.envAbbreviations.${self:provider.stage}}
#     tags:
#       environment: ${self:provider.stage}
#       cost_center: 'billing'
#       project: 'pb-school'
#     handler: controllers/updateUser.main
#     vpc:
#      securityGroupIds:
#        - ${self:custom.SECRETS.SecurityGroupID}
#      subnetIds:
#        - ${self:custom.SECRETS.PrivateSubnetID1}
#        - ${self:custom.SECRETS.PrivateSubnetID2}
#     # package:
#     #   artifact: ./dist/updateUser.zip
#     #   individually: true
#   # getFirebaseValidation:
#   #   name: ${self:custom.RESOURCE_PREFIX}-getFirebaseValidation${self:custom.envAbbreviations.${self:provider.stage}}
#   #   handler: handler/firebaseValidator.handler
#   #   package:
#   #     artifact: ./dist/apihandler.zip
#   #     individually: true



app: poker-school
service: ${self:app}
# Custom variable declaration.
custom:
  ProjectPrefix: pbschool
  # SECRETS: ${file(./utils/secret-manager.js):${opt:stage, 'dev'}}
  RESOURCE_PREFIX: ${opt:projectPrefix, self:custom.ProjectPrefix}
  envAbbreviations:
    dev: -dev
    staging: -staging
    prod: -prod
    qa: -qa

provider:
  name: aws
  stage: ${opt:stage, 'dev'}
  runtime: nodejs14.x
  role: CustomLambdaRole
  #fallback strategy
  region: ${opt:region, 'ap-south-1'}
  stackName: ${self:custom.RESOURCE_PREFIX}${self:custom.envAbbreviations.${self:provider.stage}} # pbschool-dev, pbschool-qa, pbschool
  apiName: ${self:custom.RESOURCE_PREFIX}${self:custom.envAbbreviations.${self:provider.stage}}
  # deploymentBucket:
  #   name: ${self:custom.SECRETS.DeploymentBucket} # ? deployment bucket, pre created
  # deploymentPrefix: ${self:custom.RESOURCE_PREFIX}
  # memorySize: 256
  # timeout: 30
  # environment:
  #   ENV_NAME: ${self:provider.stage}
  #   API_GATEWAY_ARN: { "Fn::Join" : ["", [ "arn:aws:apigateway:", { "Ref" : "AWS::Region" }, "::/restapis/", { "Ref" : "ApiGatewayRestApi" } ] ] }

    # environment: ${self:provider.stage}
#     cost_center: 'billing'
#     project: 'pb-school'
  # Here we can set the environment variables which will be assign to all lambdas.
  # environment:
  # key: value
  # ${opt:stage, self:provider.stage} - opt:stage means it tells to serverless to use --stage flag value for the stage variable from CLI if exists.
  # self:provider.stage tells serverless to use the default stage value from provider
plugins:
  # This plugin enables use of AWS aliases on Lambda functions
  - serverless-aws-alias
  - serverless-offline
  - serverless-prune-plugin
resources:
  Resources:
    CustomLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        RoleName: ${self:custom.RESOURCE_PREFIX}-CustomLambdaRole${self:custom.envAbbreviations.${self:provider.stage}} # required if you want to use 'serverless deploy --function' later on
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
                  - edgelambda.amazonaws.com
              Action: sts:AssumeRole
functions:
  mainServer:
    name: ${self:custom.RESOURCE_PREFIX}-mainServer${self:custom.envAbbreviations.${self:provider.stage}}
    tags:
      environment: ${self:provider.stage}
      cost_center: 'billing'
      project: 'pb-school'
    handler: handler/apihandler.main
    events:
      - http:
          path: /v1/chapters
          method: get
          cors: true
      - http:
          path: /v1/courses/chapters
          method: get
          cors: true
      - http:
          path: /v1/chapters/quizzes
          method: get
          cors: true
      - http:
          path: /v1/courses
          method: get
          cors: true
      - http:
          path: /v1/coursedetails
          method: get
          cors: true
      - http:
          path: /v1/feeds
          method: get
          cors: true
      - http:
          path: /v1/freevideos
          method: get
          cors: true
      - http:
          path: /v1/freequizzes
          method: get
          cors: true
      - http:
          path: /v1/freequiz
          method: get
          cors: true
      - http:
          path: /v1/homepage
          method: get
          cors: true
      - http:
          path: /v1/livestreams
          method: get
          cors: true
      - http:
          path: /v1/banners
          method: get
          cors: true
      - http:
          path: /v1/userprogress
          method: get
          cors: true
      - http:
          path: /v1/postuserprogress
          method: post
          cors: true
      - http:
          path: /v1/quizprogress
          method: get
          cors: true
      - http:
          path: /v1/videoprogress
          method: get
          cors: true
      - http:
          path: /v1/chapterprogress
          method: get
          cors: true
      - http:
          path: /v1/courseprogress
          method: get
          cors: true
      - http:
          path: /v1/postuserfeedback
          method: post
          cors: true
      - http:
          path: /v1/getuserfeedback
          method: get
          cors: true
      - http:
          path: /v1/getmylearning
          method: get
          cors: true
      - http:
          path: /v1/getbadge
          method: get
          cors: true
      - http:
          path: /v1/postbulkvideoprogress
          method: post
          cors: true
      - http:
          path: /v1/getincompletevideoprogress
          method: get
          cors: true
      - http:
          path: /v1/welcomebadge
          method: get
          cors: true
      - http:
          path: /v1/badgeheader
          method: get
          cors: true
      - http:
          path: /v1/badgedetail
          method: get
          cors: true
      - http:
          path: /v1/assignbadge
          method: get
          cors: true
      - http:
          path: /v1/bookmark
          method: post
          cors: true
      - http:
          path: /v1/videos-bookmark
          method: get
          cors: true
      - http:
          path: /v1/chapters-bookmark
          method: get
          cors: true
      - http:
          path: /v1/quiz-bookmark
          method: get
          cors: true
      - http:
          path: /v1/videos
          method: get
          cors: true
      - http:
          path: /v1/popup
          method: get
          cors: true
      - http:
          path: /v1/courses-left
          method: get
          cors: true
      - http:
          path: /v1/streak-detail
          method: get
          core: true
      - http:
          path: /v1/recommendations
          method: get
          core: true
    # package:
    #   artifact: ./dist/apihandler.zip
    #   individually: true
    # vpc:
    #  securityGroupIds:
    #    - ${self:custom.SECRETS.SecurityGroupID}
    #  subnetIds:
    #    - ${self:custom.SECRETS.PrivateSubnetID1}
    #    - ${self:custom.SECRETS.PrivateSubnetID2}
  userUpdate:
    name: updateQuiz
    handler: controllers/updateUser.userUpdate
  # getFirebaseValidation:
  #   name: ${self:custom.RESOURCE_PREFIX}-getFirebaseValidation${self:custom.envAbbreviations.${self:provider.stage}}
  #   handler: handler/firebaseValidator.handler
  #   package:
  #     artifact: ./dist/apihandler.zip
  #     individually: true